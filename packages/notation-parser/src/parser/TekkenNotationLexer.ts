// Generated from src/grammar/TekkenNotation.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TekkenNotationLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly ACTION_INPUT = 6;
	public static readonly MOVEMENT_TAP_INPUT = 7;
	public static readonly MOVEMENT_HOLD_INPUT = 8;
	public static readonly MOVEMENT_NEUTRAL_INPUT = 9;
	public static readonly MOVEMENT_ALIAS_INPUT = 10;
	public static readonly TEXT = 11;
	public static readonly SPECIAL = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "ACTION_INPUT", "MOVEMENT_TAP_INPUT", 
		"MOVEMENT_HOLD_INPUT", "MOVEMENT_NEUTRAL_INPUT", "MOVEMENT_ALIAS_INPUT", 
		"TEXT", "SPECIAL", "MOVEMENT_ALIAS", "RAGE_ALIAS", "WALL_ALIAS", "HIT_ALIAS", 
		"STATE_ALIAS", "STANCE_ALIAS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "','", "'/'", "'+'", "'~'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "ACTION_INPUT", 
		"MOVEMENT_TAP_INPUT", "MOVEMENT_HOLD_INPUT", "MOVEMENT_NEUTRAL_INPUT", 
		"MOVEMENT_ALIAS_INPUT", "TEXT", "SPECIAL",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TekkenNotationLexer._LITERAL_NAMES, TekkenNotationLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TekkenNotationLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TekkenNotationLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TekkenNotation.g4"; }

	// @Override
	public get ruleNames(): string[] { return TekkenNotationLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TekkenNotationLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TekkenNotationLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TekkenNotationLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0E\xA9\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x05\vF\n\v\x03\f\x03\f\x07\fJ\n\f\f\f\x0E\fM\v\f\x03\f\x03\f" +
		"\x03\r\x03\r\x03\r\x03\r\x03\r\x05\rV\n\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x05\x0En\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\x84\n\x0F\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\x8D\n\x10\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x05\x11\x9A\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x05\x12\xA4\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x02" +
		"\x02\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\x03\x02\x07" +
		"\x03\x0236\x06\x02ddffhhww\x06\x02DDFFHHWW\x04\x02PPpp\x05\x022;C\\c|" +
		"\x02\xBD\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x03\'\x03\x02\x02\x02\x05)\x03\x02\x02\x02\x07+\x03\x02\x02\x02\t" +
		"-\x03\x02\x02\x02\v/\x03\x02\x02\x02\r1\x03\x02\x02\x02\x0F3\x03\x02\x02" +
		"\x02\x115\x03\x02\x02\x02\x137\x03\x02\x02\x02\x15E\x03\x02\x02\x02\x17" +
		"G\x03\x02\x02\x02\x19U\x03\x02\x02\x02\x1Bm\x03\x02\x02\x02\x1D\x83\x03" +
		"\x02\x02\x02\x1F\x8C\x03\x02\x02\x02!\x99\x03\x02\x02\x02#\xA3\x03\x02" +
		"\x02\x02%\xA5\x03\x02\x02\x02\'(\x07=\x02\x02(\x04\x03\x02\x02\x02)*\x07" +
		".\x02\x02*\x06\x03\x02\x02\x02+,\x071\x02\x02,\b\x03\x02\x02\x02-.\x07" +
		"-\x02\x02.\n\x03\x02\x02\x02/0\x07\x80\x02\x020\f\x03\x02\x02\x0212\t" +
		"\x02\x02\x022\x0E\x03\x02\x02\x0234\t\x03\x02\x024\x10\x03\x02\x02\x02" +
		"56\t\x04\x02\x026\x12\x03\x02\x02\x0278\t\x05\x02\x028\x14\x03\x02\x02" +
		"\x029:\x07S\x02\x02:;\x07E\x02\x02;F\x07H\x02\x02<=\x07S\x02\x02=>\x07" +
		"E\x02\x02>F\x07D\x02\x02?@\x07J\x02\x02@A\x07E\x02\x02AF\x07H\x02\x02" +
		"BC\x07J\x02\x02CD\x07E\x02\x02DF\x07D\x02\x02E9\x03\x02\x02\x02E<\x03" +
		"\x02\x02\x02E?\x03\x02\x02\x02EB\x03\x02\x02\x02F\x16\x03\x02\x02\x02" +
		"GK\x07$\x02\x02HJ\t\x06\x02\x02IH\x03\x02\x02\x02JM\x03\x02\x02\x02KI" +
		"\x03\x02\x02\x02KL\x03\x02\x02\x02LN\x03\x02\x02\x02MK\x03\x02\x02\x02" +
		"NO\x07$\x02\x02O\x18\x03\x02\x02\x02PV\x05\x1B\x0E\x02QV\x05\x1D\x0F\x02" +
		"RV\x05\x1F\x10\x02SV\x05#\x12\x02TV\x05%\x13\x02UP\x03\x02\x02\x02UQ\x03" +
		"\x02\x02\x02UR\x03\x02\x02\x02US\x03\x02\x02\x02UT\x03\x02\x02\x02V\x1A" +
		"\x03\x02\x02\x02WX\x07F\x02\x02XY\x07C\x02\x02YZ\x07U\x02\x02Zn\x07J\x02" +
		"\x02[\\\x07E\x02\x02\\n\x07F\x02\x02]^\x07U\x02\x02^n\x07U\x02\x02_`\x07" +
		"U\x02\x02`a\x07U\x02\x02an\x07N\x02\x02bc\x07U\x02\x02cd\x07U\x02\x02" +
		"dn\x07T\x02\x02ef\x07U\x02\x02fn\x07Y\x02\x02gh\x07U\x02\x02hi\x07Y\x02" +
		"\x02in\x07N\x02\x02jk\x07U\x02\x02kl\x07Y\x02\x02ln\x07T\x02\x02mW\x03" +
		"\x02\x02\x02m[\x03\x02\x02\x02m]\x03\x02\x02\x02m_\x03\x02\x02\x02mb\x03" +
		"\x02\x02\x02me\x03\x02\x02\x02mg\x03\x02\x02\x02mj\x03\x02\x02\x02n\x1C" +
		"\x03\x02\x02\x02op\x07T\x02\x02pq\x07C\x02\x02qr\x07I\x02\x02r\x84\x07" +
		"G\x02\x02st\x07T\x02\x02tu\x07C\x02\x02uv\x07I\x02\x02vw\x07G\x02\x02" +
		"wx\x07C\x02\x02xy\x07T\x02\x02y\x84\x07V\x02\x02z{\x07T\x02\x02{|\x07" +
		"C\x02\x02|}\x07I\x02\x02}~\x07G\x02\x02~\x7F\x07F\x02\x02\x7F\x80\x07" +
		"T\x02\x02\x80\x81\x07K\x02\x02\x81\x82\x07X\x02\x02\x82\x84\x07G\x02\x02" +
		"\x83o\x03\x02\x02\x02\x83s\x03\x02\x02\x02\x83z\x03\x02\x02\x02\x84\x1E" +
		"\x03\x02\x02\x02\x85\x86\x07Y\x02\x02\x86\x87\x07C\x02\x02\x87\x88\x07" +
		"N\x02\x02\x88\x8D\x07N\x02\x02\x89\x8A\x07Y\x02\x02\x8A\x8D\x07#\x02\x02" +
		"\x8B\x8D\x07Y\x02\x02\x8C\x85\x03\x02\x02\x02\x8C\x89\x03\x02\x02\x02" +
		"\x8C\x8B\x03\x02\x02\x02\x8D \x03\x02\x02\x02\x8E\x8F\x07U\x02\x02\x8F" +
		"\x9A\x07#\x02\x02\x90\x9A\x07U\x02\x02\x91\x92\x07C\x02\x02\x92\x9A\x07" +
		"#\x02\x02\x93\x9A\x07C\x02\x02\x94\x95\x07M\x02\x02\x95\x96\x07P\x02\x02" +
		"\x96\x9A\x07F\x02\x02\x97\x98\x07E\x02\x02\x98\x9A\x07J\x02\x02\x99\x8E" +
		"\x03\x02\x02\x02\x99\x90\x03\x02\x02\x02\x99\x91\x03\x02\x02\x02\x99\x93" +
		"\x03\x02\x02\x02\x99\x94\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9A\"" +
		"\x03\x02\x02\x02\x9B\x9C\x07D\x02\x02\x9C\xA4\x07V\x02\x02\x9D\x9E\x07" +
		"H\x02\x02\x9E\xA4\x07E\x02\x02\x9F\xA0\x07Y\x02\x02\xA0\xA4\x07U\x02\x02" +
		"\xA1\xA2\x07Y\x02\x02\xA2\xA4\x07T\x02\x02\xA3\x9B\x03\x02\x02\x02\xA3" +
		"\x9D\x03\x02\x02\x02\xA3\x9F\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA4" +
		"$\x03\x02\x02\x02\xA5\xA6\x07T\x02\x02\xA6\xA7\x07C\x02\x02\xA7\xA8\x07" +
		"K\x02\x02\xA8&\x03\x02\x02\x02\v\x02EKUm\x83\x8C\x99\xA3\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TekkenNotationLexer.__ATN) {
			TekkenNotationLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TekkenNotationLexer._serializedATN));
		}

		return TekkenNotationLexer.__ATN;
	}

}

