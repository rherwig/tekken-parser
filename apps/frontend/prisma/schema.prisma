// Docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum ControllerLayout {
    GAMEPAD
    XBOX
    PLAYSTATION
    ARCADE
    HITBOX
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    preferences   Preferences?
    role          Role         @default(USER)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Preferences {
    id     String            @id @default(auto()) @map("_id") @db.ObjectId
    userId String            @unique @db.ObjectId
    user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    layout ControllerLayout? @default(ARCADE)
}

model Character {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    name     String  @unique
    slug     String  @unique
    imageUrl String?
    combos   Combo[]
}

model Combo {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    notation    String
    name        String?
    damage      Int?
    hits        Int?
    notes       String?
    character   Character @relation(fields: [characterId], references: [id])
    characterId String    @db.ObjectId
}
